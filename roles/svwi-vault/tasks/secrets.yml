---
- name: Set Vault secrets and ensure they are in vault.yml
  vars:
    vault_secrets_to_prompt:
      - name: apple_role_id
        description: "Please provide the AppRole ID for {{ ansible_hostname }}-role-id:"
        ansible_var: apple_role_id
      - name: secret_id
        description: "Please provide the Secret ID for {{ ansible_hostname }}-secret-id:"
        ansible_var: secret_id
      - name: star_svwi_us_crt
        description: "Please provide the star-svwi-us-crt (certificate content):"
        ansible_var: starsvwiuscert
      - name: star_svwi_us_key
        description: "Please provide the star-svwi-us-key (private key content):"
        ansible_var: starsvwiuskey
  ansible.builtin.pause: # This pause will be replaced by a custom module that will handle interactive secret prompting and saving to vault.yml
    prompt: "This task will prompt for sensitive Vault secrets. Proceed? (y/n)"
    private: no

- name: Configure AppRole Agent (if secretid is provided)
  ansible.builtin.include_role:
    name: vault-approle-agent-role # This role will need to be created or integrated
  when: secretid is defined and secretid != ''

- name: Handle initial Vault setup on vault1.svwi.us
  when: ansible_hostname == 'vault1.svwi.us'
  block:

    # Corresponding to Puppet's 'init-vault' exec
    - name: Initialize Vault and save unseal tokens to GCP Secrets Manager
      ansible.builtin.shell:
        cmd: |-
          /usr/bin/vault operator init | /usr/bin/gcloud secrets versions add vault-tokens --data-file=- && touch /opt/vault/vault.initialized
        creates: /opt/vault/vault.initialized
      environment:
        VAULT_ADDR: "https://{{ ansible_hostname }}:8200"
      args:
        chdir: /home/vault
      become: true
      become_user: vault
      # Note: This vault init command relies on gcloud being installed and configured. That's handled in the Puppet code if not in GCP.
      # If the target is not GCP, then we need to ensure gcloud is installed. This is outside the scope of this particular task list.

    # Corresponding to Puppet's 'create-initial-gossip-key-consul' exec (Ignoring consul part)
    - name: Create initial gossip key in Vault
      ansible.builtin.shell:
        cmd: |-
          /usr/bin/consul keygen | tr -d "\n" | VAULT_TOKEN=$(cat /run/vault-vault/vault.token) /usr/bin/vault kv patch puppetv2/common consul-encryption-key=-
        removes: |-
          /usr/bin/echo && VAULT_TOKEN=$(cat /run/vault-vault/vault.token) /usr/bin/vault kv get -field=consul-encryption-key puppetv2/common
      environment:
        VAULT_ADDR: "https://{{ ansible_hostname }}:8200"
      register: create_gossip_key_result
      changed_when: "'changed' in create_gossip_key_result.stdout"
      failed_when: "'failed' in create_gossip_key_result.stderr"
      become: true
      become_user: vault
    
    # Corresponding to Puppet's 'rotate-consul-connect-token' cron (Ignoring consul part)
    - name: Ensure consul connect token is rotated every year (Ansible cron)
      ansible.builtin.cron:
        name: "rotate-consul-connect-token"
        minute: "0"
        hour: "0"
        month: "1"
        job: "/usr/bin/vault token create -format=json -policy=connect-ca | jq -j \".auth.client_token\" | /usr/bin/vault kv patch puppetv2/common consul-connect-token=-"
        user: vault
        state: present
      # Note: This task assumes jq is installed

- name: Handle GCP-related setup if not in GCP (Non-GCE VM)
  when: ansible_facts['cloud_provider'] != 'GCE'
  block:
    - name: Ensure /etc/vault.d/gcpckms.json exists
      ansible.builtin.file:
        path: /etc/vault.d/gcpckms.json
        state: touch
        owner: vault
        mode: '0600'
      # Puppet had archive, exec for apt-key and add-gcloud-repo, and package for google-cloud-cli
      # These would typically be handled by a dedicated role like 'google-cloud-sdk' if needed.
      # For now, just ensuring the file exists as a placeholder.

